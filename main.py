from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from const import *
from keyboards.buttons import *
from transacts import *
import sqlite3
from datetime import datetime


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

connection = sqlite3.connect('adreses.db')
cursor = connection.cursor()

global mid


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.from_user.id, f"<b>–ó–¥—Ä–∞—Å–≤—Ç–≤—É–π, {message.from_user.username}!</b>\n–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç <b>AMLCrypto!</b>\n\n–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –∞–¥—Ä–µ—Å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –º—ã —Ö–æ—Ç–∏–º –Ω–∞–±–ª—é–¥–∞—Ç—å\n<b>Powered by @xen0x.</b>", parse_mode='html', reply_markup=keyb)


@dp.message_handler(lambda message: message.text == 'üóí–°–ø–∏—Å–æ–∫ –ê–¥—Ä–µ—Å–æ–≤üóí')
async def list_adress(message: types.Message):
    user_adreses = connection.execute(f"SELECT ALL adreses, ticket FROM users WHERE name = '{message.from_user.username}'").fetchall()
    messageu = ''
    username = message.from_user.username
    for a in user_adreses:
        messageu = messageu + ' ' + str(a) + '\n'
    sqtime = datetime.now()
    cursor.execute(
        f"""INSERT INTO sqllogs (username, event, time) VALUES ('{str(username)}', 'get adreses', '{str(sqtime)}')""")
    connection.commit()
    await message.reply(f'<b>–¢–≤–æ–∏ –ê–¥—Ä–µ—Å–∞:</b>\n\n{messageu}', parse_mode='html')


@dp.message_handler(lambda message: message.text == '‚ùå–£–¥–∞–ª–∏—Ç—å –ê–¥—Ä–µ—Å–∞‚ùå')
async def list_adress(message: types.Message):
    cursor.execute(f"DELETE FROM users WHERE name = '{message.from_user.username}'")
    connection.commit()
    username = message.from_user.username
    sqtime = datetime.now()
    cursor.execute(
        f"""INSERT INTO sqllogs (username, event, time) VALUES ('{str(username)}', 'deleted username adreses', '{str(sqtime)}')""")
    connection.commit()
    await message.reply(f'<b>–¢–≤–æ–∏ –ê–¥—Ä–µ—Å–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!</b>', parse_mode='html')


@dp.message_handler(lambda message: message.text == '‚ùå–£–¥–∞–ª–∏—Ç—å –ê–¥—Ä–µ—Å‚ùå')
async def list_adress(message: types.Message):
    await delAdres.deladres.set()
    await message.reply(f'<b>–û—Ç—Ä–∞–≤—å –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å</b>', parse_mode='html')


@dp.message_handler(state=delAdres.deladres)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['deladres'] = message.text

    async with state.proxy() as data:
        adres = data['deladres']
        cursor.execute(f"DELETE FROM users WHERE adreses = '{adres}'")
        connection.commit()

        username = message.from_user.username
        sqtime = datetime.now()
        cursor.execute(
            f"""INSERT INTO sqllogs (username, event, time) VALUES ('{str(username)}', 'deleted adres {str(adres)}', '{str(sqtime)}')""")
        connection.commit()
        await message.reply('<b>–ê–¥—Ä–µ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω!</b>\n\n', parse_mode='html', reply_markup=keyb)

        await state.finish()


@dp.message_handler(lambda message: message.text == '‚úÖ–î–æ–±–∞–≤–∏—Ç—å –ê–¥—Ä–µ—Å‚úÖ')
async def add_adress(message: types.Message):
    await addAdres.adres.set()
    await message.reply('–û—Ç–ø—Ä–∞–≤–ª—è–π –∞–¥—Ä–µ—Å')


@dp.message_handler(content_types=['text'], state=addAdres.adres)
async def load_adress(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['adres'] = message.text
    await addAdres.next()
    await message.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–ª—è –Ω–µ–≥–æ –∑–∞–º–µ—Ç–∫—É')


@dp.message_handler(state=addAdres.name)
async def load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    async with state.proxy() as data:
        id = message.from_user.id
        name = message.from_user.username
        adres = data['adres']
        ticket = data['name']
        cursor.execute(f"""INSERT INTO users (id, name, adreses, ticket) VALUES ('{id}', '{name}', '{adres}', '{ticket}')""")
        connection.commit()
        username = message.from_user.username
        sqtime = datetime.now()
        cursor.execute(
            f"""INSERT INTO sqllogs (username, event, time) VALUES ('{str(username)}', 'add adres {str(adres)}', '{str(sqtime)}')""")
        connection.commit()
        await message.reply('<b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n–°–ø–∏—Å–æ–∫ –ê–¥—Ä–µ—Å–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω', parse_mode='html', reply_markup=keyb)

        await state.finish()


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(infinity_wallet_updates())
    loop.create_task(infinity_transctions_updates())
    executor.start_polling(dp, skip_updates=None)
